/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import Objetos.Proceso;
import algoritmo.FCFS;
import algoritmo.Prioridad;
import algoritmo.RoundRobin;
import algoritmo.SJF;

import javax.swing.*;
import java.awt.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logic.AdministradorDeMemoria;

public class VentanaPrincipalPrincipal extends javax.swing.JFrame {

    private ArrayList<Proceso> procesos;
    private DefaultListModel<String> listaProcesosModelo;
    private Map<Integer, JProgressBar> barrasDeProgreso;
    AdministradorDeMemoria administradormemoria;

    public VentanaPrincipalPrincipal() {
        procesos = new ArrayList<>();
        listaProcesosModelo = new DefaultListModel<>();
        barrasDeProgreso = new HashMap<>();

        setTitle("Simulador de Planificaci√≥n de Procesos");

        setSize(900, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        initComponents();
        configurarEventoTabla(); // Configurar evento para la tabla
//        agregarpane();

        jPanel2.setLayout(new BoxLayout(jPanel2, BoxLayout.Y_AXIS));
        barraProgresoGeneral.setStringPainted(true);//DYNAMIC
        administradormemoria = new AdministradorDeMemoria(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        campoNombre = new javax.swing.JTextField();
        campoTiempoLlegada = new javax.swing.JTextField();
        campoTiempoRafaga = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        campoNivelPrioridad = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        campoMemoria = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        barraProgresoGeneral = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonEliminar = new javax.swing.JButton();
        jButtonEditar = new javax.swing.JButton();
        jButtonEliminarTodo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("NOMBRE");

        jLabel2.setText("TIEMPO DE LLEGADA");

        jLabel3.setText("TIEMPO RAFAGA ");

        jButton1.setText("AGREGAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("MEMORIA");

        campoNivelPrioridad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNivelPrioridadActionPerformed(evt);
            }
        });

        jLabel5.setText("PRIORIDAD");

        jToggleButton1.setText("Ejecutar FCFS");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("Ejecutar Round Robin");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jToggleButton3.setText("Ejecutar SJF");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jToggleButton4.setText("Ejecutar Prioridad");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        barraProgresoGeneral.setStringPainted(true);

        jPanel2.setPreferredSize(new java.awt.Dimension(176, 300));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paginacion", "Segmentacion" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Manejo de Memoria");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FIFO", "LRU", "OPT" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel7.setText("Algortimos De Remplazo");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PrimerAjuste", "MejorAjuste", "PeorAjuste" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel8.setText("Algoritmos de Segmentacion ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Tiempo Llegada", "Rafaga", "Prioridad", "Memoria"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jButtonEliminar.setText("ELIMINAR");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonEditar.setText("EDITAR");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonEliminarTodo.setText("ELIMINAR TODO");
        jButtonEliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jToggleButton1)
                        .addGap(30, 30, 30)
                        .addComponent(jToggleButton2)
                        .addGap(26, 26, 26)
                        .addComponent(jToggleButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jToggleButton4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(barraProgresoGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jButtonEliminar)
                                    .addComponent(jButtonEditar)
                                    .addComponent(jButtonEliminarTodo))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(112, 112, 112)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(28, 28, 28)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(campoTiempoRafaga, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoTiempoLlegada, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoNombre, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoNivelPrioridad)
                            .addComponent(campoMemoria, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(24, 24, 24))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(16, 16, 16))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(campoTiempoLlegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(campoTiempoRafaga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(campoNivelPrioridad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(campoMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonEliminar)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonEditar)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonEliminarTodo))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(barraProgresoGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jToggleButton2)
                    .addComponent(jToggleButton3)
                    .addComponent(jToggleButton4))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        agregarProceso();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        int id = 1;
        
            ejecutarFCFS(id);
      

    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        int id = 2;
        ejecutarRoundRobin(id);

    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        int id = 4;
        ejecutarPrioridad(id);

    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void campoNivelPrioridadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNivelPrioridadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNivelPrioridadActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        int id = 3;
        ejecutarSJF(id);
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        eliminarProceso();
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        editarProceso();
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jButtonEliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarTodoActionPerformed
        eliminarTodosLosProcesos();
    }//GEN-LAST:event_jButtonEliminarTodoActionPerformed

//private void agregarProceso() {
//    try {
//        int idProceso = Integer.parseInt(campoNombre.getText());
//        int tiempoLlegada = Integer.parseInt(campoTiempoLlegada.getText());
//        int tiempoRafaga = Integer.parseInt(campoTiempoRafaga.getText());
//        int prioridad = Integer.parseInt(campoNivelPrioridad.getText());
//        int tamanomemoria = Integer.parseInt(campoMemoria.getText());
//
//      
//        if (tamanomemoria > 512) {
//            JOptionPane.showMessageDialog(this, "El tama√±o de memoria excede el m√°ximo permitido (512 bytes).", "Error", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//
//        // aqui se crea un nuevo proceso y a√±adirlo al ArrayList
//        Proceso proceso = new Proceso(idProceso, "Proceso" + idProceso, tamanomemoria, 100, tiempoLlegada, tiempoRafaga, prioridad, 5);
//        procesos.add(proceso);
//
//        // se a√±ade el proceso al modelo de la tabla
//        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
//        modelo.addRow(new Object[]{idProceso, tiempoLlegada, tiempoRafaga, prioridad, tamanomemoria});
//
//       
//        limpiarCampos();
//    } catch (NumberFormatException e) {
//        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos con valores v√°lidos.", "Error", JOptionPane.ERROR_MESSAGE);
//    }
//}
//    private void agregarProceso() {
//    try {
//        int idProceso = Integer.parseInt(campoNombre.getText());
//        int tiempoLlegada = Integer.parseInt(campoTiempoLlegada.getText());
//        int tiempoRafaga = Integer.parseInt(campoTiempoRafaga.getText());
//        int prioridad = Integer.parseInt(campoNivelPrioridad.getText());
//        int tamanomemoria = Integer.parseInt(campoMemoria.getText());
//
//        // aqui se valida si el tama√±o de memoria excede el l√≠mite para segmentaci√≥n
//        boolean esSegmentacion = !extraertextoCBUNO(); //esto seleccionada es Segmentaci√≥n
//        if (esSegmentacion && tamanomemoria > 512) {
//            JOptionPane.showMessageDialog(this,
//                    "El tama√±o de memoria excede el m√°ximo permitido (512 bytes) para Segmentaci√≥n. Cambiando a Paginaci√≥n.",
//                    "Aviso",
//                    JOptionPane.INFORMATION_MESSAGE);
//
//            // Cambiar autom√°ticamente a paginaci√≥n
//            jComboBox1.setSelectedItem("Paginacion");
//
//            // Continuar con paginaci√≥n
//            esSegmentacion = false; // Forzar paginaci√≥n
//        }
//
//        // Crear un nuevo proceso y a√±adirlo al ArrayList
//        Proceso proceso = new Proceso(idProceso, "Proceso" + idProceso, tamanomemoria, 100, tiempoLlegada, tiempoRafaga, prioridad, 5);
//        procesos.add(proceso);
//
//        // A√±adir el proceso al modelo de la tabla
//        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
//        modelo.addRow(new Object[]{idProceso, tiempoLlegada, tiempoRafaga, prioridad, tamanomemoria});
//
//        // Limpiar los campos del formulario
//        limpiarCampos();
//
//    } catch (NumberFormatException e) {
//        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos con valores v√°lidos.", "Error", JOptionPane.ERROR_MESSAGE);
//    }
//}
    private void agregarProceso() {
        try {
            int idProceso = Integer.parseInt(campoNombre.getText());
            int tiempoLlegada = Integer.parseInt(campoTiempoLlegada.getText());
            int tiempoRafaga = Integer.parseInt(campoTiempoRafaga.getText());
            int prioridad = Integer.parseInt(campoNivelPrioridad.getText());
            int tamanomemoria = Integer.parseInt(campoMemoria.getText());

            // aqui se verifica si es Segmentaci√≥n
            boolean esSegmentacion = !extraertextoCBUNO(); // false indica segmentaci√≥n

            if (esSegmentacion && tamanomemoria > 512) {

                JOptionPane.showMessageDialog(this,
                        "El tama√±o de memoria excede el l√≠mite permitido para segmentaci√≥n (512 bytes). Se cambiar√° a paginaci√≥n.",
                        "Aviso", JOptionPane.WARNING_MESSAGE);

                // aqui se cambia a paginaci√≥n autom√°ticamente
                jComboBox1.setSelectedItem("Paginacion");

                // continua con la creaci√≥n del proceso
            }

            // Crear un nuevo proceso y a√±adirlo al ArrayList
            Proceso proceso = new Proceso(idProceso, "Proceso" + idProceso, tamanomemoria, 100, tiempoLlegada, tiempoRafaga, prioridad, 5);
            procesos.add(proceso);

            // A√±adir el proceso al modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            modelo.addRow(new Object[]{idProceso, tiempoLlegada, tiempoRafaga, prioridad, tamanomemoria});

            // Limpiar los campos del formulario
            limpiarCampos();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos con valores v√°lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void limpiarCampos() {
        campoNombre.setText("");
        campoTiempoLlegada.setText("");
        campoTiempoRafaga.setText("");
        campoNivelPrioridad.setText("");
        campoMemoria.setText("");
    }

//    public void agregarpane() {
//        JList<String> listaProcesos = new JList<>(listaProcesosModelo);
//        jScrollPane1.setViewportView(listaProcesos); // Aqu√≠ est√° la clave para el pane 
//    }
    private void configurarTabla() {
        jTable1.setModel(new DefaultTableModel(
                new Object[]{"ID", "Nombre", "Llegada", "R√°faga", "Prioridad", "Memoria"}, 0
        ));
    }

    private void configurarEventoTabla() {
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int filaSeleccionada = jTable1.getSelectedRow();
                if (filaSeleccionada != -1) {
                    campoNombre.setText(jTable1.getValueAt(filaSeleccionada, 0).toString());
                    campoTiempoLlegada.setText(jTable1.getValueAt(filaSeleccionada, 1).toString());
                    campoTiempoRafaga.setText(jTable1.getValueAt(filaSeleccionada, 2).toString());
                    campoNivelPrioridad.setText(jTable1.getValueAt(filaSeleccionada, 3).toString());
                    campoMemoria.setText(jTable1.getValueAt(filaSeleccionada, 4).toString());
                }
            }
        });
    }

    private void editarProceso() {
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un proceso para editar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // ve si los campos est√°n llenos
            if (campoNombre.getText().isEmpty()
                    || campoTiempoLlegada.getText().isEmpty()
                    || campoTiempoRafaga.getText().isEmpty()
                    || campoNivelPrioridad.getText().isEmpty()
                    || campoMemoria.getText().isEmpty()) {
                throw new NumberFormatException();
            }

            int idProceso = Integer.parseInt(campoNombre.getText());
            int tiempoLlegada = Integer.parseInt(campoTiempoLlegada.getText());
            int tiempoRafaga = Integer.parseInt(campoTiempoRafaga.getText());
            int prioridad = Integer.parseInt(campoNivelPrioridad.getText());
            int tamanomemoria = Integer.parseInt(campoMemoria.getText());

//        if (tamanomemoria > 512) {
//            JOptionPane.showMessageDialog(this, "El tama√±o de memoria no puede exceder 512 bytes.", "Error", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
            // Actualiza
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            modelo.setValueAt(idProceso, filaSeleccionada, 0);
            modelo.setValueAt(tiempoLlegada, filaSeleccionada, 1);
            modelo.setValueAt(tiempoRafaga, filaSeleccionada, 2);
            modelo.setValueAt(prioridad, filaSeleccionada, 3);
            modelo.setValueAt(tamanomemoria, filaSeleccionada, 4);

            // Actualizar el proceso en el ArrayList
            Proceso proceso = procesos.get(filaSeleccionada);
            proceso.setIdProceso(idProceso);
            proceso.setTiempoLlegada(tiempoLlegada);
            proceso.setTiempoRafaga(tiempoRafaga);
            proceso.setPrioridad(prioridad);
            proceso.setTama√±oEnBytes(tamanomemoria);

            limpiarCampos();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos con valores v√°lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void eliminarProceso() {
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un proceso para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.removeRow(filaSeleccionada);

        // Eliminar del ArrayList
        procesos.remove(filaSeleccionada);
    }

    private void eliminarTodosLosProcesos() {
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0);
        procesos.clear();
    }

    public void cargarBarrasDeProgreso() {
        jPanel2.removeAll();
        barrasDeProgreso.clear();
        for (Proceso proceso : procesos) {
            JProgressBar barraProgreso = new JProgressBar(0, proceso.getTiempoRafaga());
            barraProgreso.setStringPainted(true);
            barraProgreso.setString("" + proceso.getIdProceso());
            jPanel2.add(barraProgreso);
            jPanel2.revalidate();
            barrasDeProgreso.put(proceso.getIdProceso(), barraProgreso);
        }
    }

    public void actualizarBarraDeProgreso(Proceso proceso) {
        JProgressBar barraProgreso = barrasDeProgreso.get(proceso.getIdProceso());
        if (barraProgreso != null) {
            barraProgreso.setValue(proceso.getTiempoRafaga() - proceso.getTiempoRestante());
        }
    }

    public void ejecutarRoundRobin(int id) {
        cargarBarrasDeProgreso();
        new Thread(() -> {
            boolean paginacionXsegmentacion = extraertextoCBUNO();
            //   int remplazo = extraertextoCBDOS();
            int remplazo = paginacionXsegmentacion ? extraertextoCBDOS() : extraertextoCBTRES();

            administradormemoria.setIdalgoritmosRemplazo(remplazo);
            administradormemoria.setPaginacionXsegmentacion(paginacionXsegmentacion);
            administradormemoria.setProcesos(procesos);
            administradormemoria.ejecutaralgoritmo(id);

        }).start();

    }

    private void ejecutarFCFS(int id) {
        cargarBarrasDeProgreso();
        new Thread(() -> {
            boolean paginacionXsegmentacion = extraertextoCBUNO();
            int remplazo = paginacionXsegmentacion ? extraertextoCBDOS() : extraertextoCBTRES();

            administradormemoria.setPaginacionXsegmentacion(paginacionXsegmentacion);
            administradormemoria.setIdalgoritmosRemplazo(remplazo);
            administradormemoria.setProcesos(procesos);
            administradormemoria.ejecutaralgoritmo(id);
        }).start();
    }

    private void ejecutarPrioridad(int id) {
        cargarBarrasDeProgreso();
        new Thread(() -> {
            boolean paginacionXsegmentacion = extraertextoCBUNO();
            //int remplazo = extraertextoCBDOS();
            int remplazo = paginacionXsegmentacion ? extraertextoCBDOS() : extraertextoCBTRES();

            administradormemoria.setPaginacionXsegmentacion(paginacionXsegmentacion);
            administradormemoria.setIdalgoritmosRemplazo(remplazo);
            administradormemoria.setProcesos(procesos);
            administradormemoria.ejecutaralgoritmo(id);
        }).start();
    }

    private void ejecutarSJF(int id) {
        cargarBarrasDeProgreso();
        new Thread(() -> {
            boolean paginacionXsegmentacion = extraertextoCBUNO();

            int remplazo = paginacionXsegmentacion ? extraertextoCBDOS() : extraertextoCBTRES();

            administradormemoria.setPaginacionXsegmentacion(paginacionXsegmentacion);
            administradormemoria.setIdalgoritmosRemplazo(remplazo);
            administradormemoria.setProcesos(procesos);
            administradormemoria.ejecutaralgoritmo(id);

        }).start();
    }

//     agregar proceso al panel
    private void agregarBarraDeProgreso(Proceso proceso) {
        JProgressBar barraProgreso = new JProgressBar(0, proceso.getTiempoRafaga());
        barraProgreso.setStringPainted(true);
        barraProgreso.setString("" + proceso.getIdProceso());
        jPanel2.add(barraProgreso);
        jPanel2.revalidate();
    }

//    public void mostrarEstadoParticiones(String estadoParticiones) {
//    JOptionPane.showMessageDialog(this, estadoParticiones, "Estado de las Particiones", JOptionPane.INFORMATION_MESSAGE);
//}
    public void mostrarEstadoParticiones(String estadoParticiones) {
        // Dividir las l√≠neas por salto de l√≠nea para procesar cada partici√≥n
        String[] lineas = estadoParticiones.split("\n");

        // Usar StringBuilder para construir un mensaje formateado
        StringBuilder mensaje = new StringBuilder();
        mensaje.append(String.format("%-10s %-15s %-10s %-10s %-10s %-10s %-10s\n",
                "√çndice", "Proceso", "Inicio", "Final", "Unidades", "Tiempo", "Estado"));
        mensaje.append("-----------------------------------------------------------------\n");

        int indice = 0;
        for (String linea : lineas) {
            // Aqu√≠ debes extraer los datos espec√≠ficos de cada l√≠nea si est√°n separados por espacios o caracteres espec√≠ficos
            String[] datos = linea.split("\\s+");
            if (datos.length >= 6) {
                mensaje.append(String.format("%-10d %-15s %-10s %-10s %-10s %-10s %-10s\n",
                        indice++,
                        datos[1], // Nombre del proceso
                        datos[2], // Inicio
                        datos[3], // Final
                        datos[4], // Unidades
                        datos[5], // Tiempo
                        datos[6] // Estado
                ));
            }
        }

        // Mostrar el mensaje en una ventana emergente
        JOptionPane.showMessageDialog(this, mensaje.toString(), "Estado de las Particiones", JOptionPane.INFORMATION_MESSAGE);
    }

    private void actualizarBarraDeProgreso(JProgressBar barraProgreso, int valor) {
        barraProgreso.setValue(valor);
    }

    public boolean extraertextoCBUNO() {
        String opcionSeleccionada = (String) jComboBox1.getSelectedItem();

        boolean tipoMemoria;
        if ("Paginacion".equals(opcionSeleccionada)) {
            tipoMemoria = true; // 0 para Paginaci√≥n
        } else {
            tipoMemoria = false; // 1 para Segmentaci√≥n 
        }

        return tipoMemoria;
    }

    public int extraertextoCBDOS() {
        String opcionSeleccionada = (String) jComboBox2.getSelectedItem();

        int tipoMemoria = 10;
        if ("FIFO".equals(opcionSeleccionada)) {
            tipoMemoria = 1;
        }
        if ("LRU".equals(opcionSeleccionada)) {
            tipoMemoria = 2;
        }

        if ("OPT".equals(opcionSeleccionada)) {
            tipoMemoria = 3;
        }

        return tipoMemoria;
    }

    public int extraertextoCBTRES() {
        String opcionSeleccionada = (String) jComboBox3.getSelectedItem();

        int tipoMemoria = 10;
        if ("PrimerAjuste".equals(opcionSeleccionada)) {
            tipoMemoria = 1;
        }
        if ("MejorAjuste".equals(opcionSeleccionada)) {
            tipoMemoria = 2;
        }

        if ("PeorAjuste".equals(opcionSeleccionada)) {
            tipoMemoria = 3;
        }
        System.out.println("");
        return tipoMemoria;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            // Redirigir System.out a un archivo de texto
            FileOutputStream fileOut = new FileOutputStream("salida.txt", true); // true para que a√±ada al archivo
            TeeOutputStream teeOut = new TeeOutputStream(System.out, fileOut);
            PrintStream ps = new PrintStream(teeOut, true);
            System.setOut(ps);

            // Mensaje de inicio para verificar la salida
            System.out.println("Iniciando aplicaci√≥n Simulador de Planificaci√≥n de Procesos...");

        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipalPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipalPrincipal().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgresoGeneral;
    private javax.swing.JTextField campoMemoria;
    private javax.swing.JTextField campoNivelPrioridad;
    private javax.swing.JTextField campoNombre;
    private javax.swing.JTextField campoTiempoLlegada;
    private javax.swing.JTextField campoTiempoRafaga;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonEliminarTodo;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    // End of variables declaration//GEN-END:variables
}
